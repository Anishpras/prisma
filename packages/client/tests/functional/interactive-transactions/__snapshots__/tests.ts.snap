// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`interactive-transactions (cockroachdb) () batching raw rollback 1`] = `

Invalid \`prisma.$executeRaw()\` invocation:


  Raw query failed. Code: \`23505\`. Message: \`Key (id)=('1') already exists.\`
`;

exports[`interactive-transactions (cockroachdb) () batching rollback 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:243:19

  240  */
  241 testIf(getClientEngineType() === ClientEngineType.Library)('batching rollback', async () => {
  242   const result = prisma.$transaction([
→ 243     prisma.user.create(
  Unique constraint failed on the fields: (\`email\`)
`;

exports[`interactive-transactions (cockroachdb) () rollback query 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:169:25

  166   },
  167 })
  168 
→ 169 await prisma.user.create(
  Unique constraint failed on the fields: (\`email\`)
`;

exports[`interactive-transactions (mongodb) () batching rollback 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:243:19

  240  */
  241 testIf(getClientEngineType() === ClientEngineType.Library)('batching rollback', async () => {
  242   const result = prisma.$transaction([
→ 243     prisma.user.create(
  Unique constraint failed on the constraint: \`User_email_key\`
`;

exports[`interactive-transactions (mongodb) () rollback query 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:169:25

  166   },
  167 })
  168 
→ 169 await prisma.user.create(
  Unique constraint failed on the constraint: \`User_email_key\`
`;

exports[`interactive-transactions (mysql) () batching raw rollback 1`] = `

Invalid \`prisma.$executeRaw()\` invocation:


  Raw query failed. Code: \`1064\`. Message: \`You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '"User" (id, email) VALUES (?, ?)' at line 1\`
`;

exports[`interactive-transactions (mysql) () batching rollback 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:243:19

  240  */
  241 testIf(getClientEngineType() === ClientEngineType.Library)('batching rollback', async () => {
  242   const result = prisma.$transaction([
→ 243     prisma.user.create(
  Unique constraint failed on the constraint: \`User_email_key\`
`;

exports[`interactive-transactions (mysql) () rollback query 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:169:25

  166   },
  167 })
  168 
→ 169 await prisma.user.create(
  Unique constraint failed on the constraint: \`User_email_key\`
`;

exports[`interactive-transactions (postgresql) () batching raw rollback 1`] = `

Invalid \`prisma.$executeRaw()\` invocation:


  Raw query failed. Code: \`23505\`. Message: \`Key (id)=(1) already exists.\`
`;

exports[`interactive-transactions (postgresql) () batching rollback 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:243:19

  240  */
  241 testIf(getClientEngineType() === ClientEngineType.Library)('batching rollback', async () => {
  242   const result = prisma.$transaction([
→ 243     prisma.user.create(
  Unique constraint failed on the fields: (\`email\`)
`;

exports[`interactive-transactions (postgresql) () rollback query 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:169:25

  166   },
  167 })
  168 
→ 169 await prisma.user.create(
  Unique constraint failed on the fields: (\`email\`)
`;

exports[`interactive-transactions (sqlite) () batching raw rollback 1`] = `

Invalid \`prisma.$executeRaw()\` invocation:


  Raw query failed. Code: \`2067\`. Message: \`UNIQUE constraint failed: User.email\`
`;

exports[`interactive-transactions (sqlite) () batching rollback 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:243:19

  240  */
  241 testIf(getClientEngineType() === ClientEngineType.Library)('batching rollback', async () => {
  242   const result = prisma.$transaction([
→ 243     prisma.user.create(
  Unique constraint failed on the fields: (\`email\`)
`;

exports[`interactive-transactions (sqlite) () rollback query 1`] = `

Invalid \`prisma.user.create()\` invocation in
/client/tests/functional/interactive-transactions/tests.ts:169:25

  166   },
  167 })
  168 
→ 169 await prisma.user.create(
  Unique constraint failed on the fields: (\`email\`)
`;
